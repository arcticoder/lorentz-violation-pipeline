#!/usr/bin/env python3
"""
SU(2) Spin Network Portal Demonstration Script

This script demonstrates the complete SU(2) recoupling framework for 
hidden-sector energy transfer, showcasing all major components and capabilities.

Usage:
    python demo_complete_framework.py

Author: Quantum Geometry Hidden Sector Framework
"""

import numpy as np
import matplotlib.pyplot as plt
import time
import warnings
warnings.filterwarnings('ignore')

def main():
    """Main demonstration function."""
    
    print("="*80)
    print("üåü SU(2) SPIN NETWORK PORTAL COMPLETE FRAMEWORK DEMO")
    print("="*80)
    
    # Test imports
    try:
        from su2_recoupling_module import (
            SU2RecouplingCalculator, 
            SpinNetworkPortal, 
            SpinNetworkConfig,
            demo_su2_recoupling,
            demo_energy_transfer
        )
        print("‚úì Core SU(2) recoupling module imported successfully")
    except ImportError as e:
        print(f"‚ùå Failed to import core module: {e}")
        return
    
    try:
        from tensor_network_bridge import (
            TensorNetworkConfig,
            create_tensornetwork_from_su2_portal,
            demo_tensor_network_integration
        )
        print("‚úì Tensor network bridge module imported successfully")
        tn_available = True
    except ImportError as e:
        print(f"‚ö† Tensor network bridge not fully available: {e}")
        tn_available = False
    
    print("\n" + "="*60)
    print("1Ô∏è‚É£ BASIC SU(2) RECOUPLING COEFFICIENTS")
    print("="*60)
    
    # Demonstrate basic 3j and 6j calculations
    calc = SU2RecouplingCalculator(max_j=5)
    
    print("\nüî¢ Computing Wigner 3j symbols:")
    test_3j_cases = [
        (1, 1, 0, 1, -1, 0),
        (1, 1, 1, 1, 0, -1),
        (2, 1, 1, 0, 1, -1),
        (1.5, 0.5, 1, 0.5, -0.5, 0)
    ]
    
    for j1, j2, j3, m1, m2, m3 in test_3j_cases:
        start_time = time.time()
        symbol = calc.wigner_3j(j1, j2, j3, m1, m2, m3)
        calc_time = time.time() - start_time
        
        print(f"  ‚éõ{j1:3.1f} {j2:3.1f} {j3:3.1f}‚éû")
        print(f"  ‚éù{m1:3.1f} {m2:3.1f} {m3:3.1f}‚é† = {symbol:8.5f}  ({calc_time*1000:.2f} ms)")
    
    print("\nüî¢ Computing Wigner 6j symbols:")
    test_6j_cases = [
        (1, 1, 1, 1, 1, 1),
        (2, 1, 1, 1, 2, 1),
        (1.5, 0.5, 1, 0.5, 1.5, 1)
    ]
    
    for j1, j2, j3, j4, j5, j6 in test_6j_cases:
        start_time = time.time()
        symbol = calc.wigner_6j(j1, j2, j3, j4, j5, j6)
        calc_time = time.time() - start_time
        
        print(f"  ‚éß{j1:3.1f} {j2:3.1f} {j3:3.1f}‚é´")
        print(f"  ‚é©{j4:3.1f} {j5:3.1f} {j6:3.1f}‚é≠ = {symbol:8.5f}  ({calc_time*1000:.2f} ms)")
    
    print("\n" + "="*60)
    print("2Ô∏è‚É£ SPIN NETWORK PORTAL CONFIGURATION")
    print("="*60)
    
    # Create and configure spin network portal
    config = SpinNetworkConfig(
        base_coupling=1e-5,
        geometric_suppression=0.1,
        portal_correlation_length=1.5,
        max_angular_momentum=3,
        network_size=12,
        connectivity=0.4
    )
    
    print(f"\nüåê Creating spin network portal:")
    print(f"  ‚Ä¢ Base coupling: {config.base_coupling:.2e}")
    print(f"  ‚Ä¢ Geometric suppression: {config.geometric_suppression}")
    print(f"  ‚Ä¢ Portal correlation length: {config.portal_correlation_length}")
    print(f"  ‚Ä¢ Max angular momentum: {config.max_angular_momentum}")
    print(f"  ‚Ä¢ Network size: {config.network_size}")
    print(f"  ‚Ä¢ Connectivity: {config.connectivity}")
    
    portal = SpinNetworkPortal(config)
    
    print(f"\nüìä Generated network statistics:")
    print(f"  ‚Ä¢ Nodes: {portal.network.number_of_nodes()}")
    print(f"  ‚Ä¢ Edges: {portal.network.number_of_edges()}")
    print(f"  ‚Ä¢ Average degree: {2*portal.network.number_of_edges()/portal.network.number_of_nodes():.2f}")
    
    print("\n" + "="*60)
    print("3Ô∏è‚É£ ENERGY TRANSFER CALCULATIONS")
    print("="*60)
    
    # Test effective coupling calculations
    print("\n‚ö° Effective coupling strengths:")
    sample_vertices = list(portal.network.nodes())[:5]
    
    for vertex in sample_vertices:
        coupling = portal.effective_coupling(vertex)
        degree = portal.network.degree[vertex]
        print(f"  ‚Ä¢ Vertex {vertex} (degree {degree}): g_eff = {coupling:.2e}")
    
    # Test energy leakage amplitudes
    print("\nüîÑ Energy leakage amplitudes:")
    energy_transfers = [(10.0, 8.0), (5.0, 3.0), (15.0, 12.0), (1.0, 0.5)]
    
    for E_initial, E_final in energy_transfers:
        start_time = time.time()
        amplitude = portal.energy_leakage_amplitude(E_initial, E_final)
        calc_time = time.time() - start_time
        
        print(f"  ‚Ä¢ {E_initial:4.1f} eV ‚Üí {E_final:4.1f} eV: |A| = {abs(amplitude):.2e}, "
              f"œÜ = {np.angle(amplitude):.3f} rad  ({calc_time*1000:.1f} ms)")
    
    # Compute transfer rate
    print("\nüìà Energy transfer rate calculation:")
    
    def density_of_states(E):
        """Simple quadratic density of states."""
        return E**2 / 10
    
    start_time = time.time()
    transfer_rate = portal.energy_transfer_rate((1.0, 10.0), density_of_states)
    calc_time = time.time() - start_time
    
    print(f"  ‚Ä¢ Transfer rate Œì = {transfer_rate:.2e} s‚Åª¬π  ({calc_time:.2f} s)")
    
    if transfer_rate > 0:
        characteristic_time = 1.0 / transfer_rate
        print(f"  ‚Ä¢ Characteristic time œÑ = {characteristic_time:.2e} s")
    
    print("\n" + "="*60)
    print("4Ô∏è‚É£ PARAMETER OPTIMIZATION")
    print("="*60)
    
    # Parameter sweep demonstration
    print("\nüîç Parameter sweep analysis:")
    
    param_ranges = {
        'base_coupling': (1e-7, 1e-4),
        'geometric_suppression': (0.05, 0.2),
        'portal_correlation_length': (1.0, 3.0)
    }
    
    print(f"  ‚Ä¢ Parameter ranges:")
    for param, (min_val, max_val) in param_ranges.items():
        print(f"    - {param}: [{min_val:.2e}, {max_val:.2e}]")
    
    start_time = time.time()
    results = portal.parameter_sweep(param_ranges, n_samples=50)
    sweep_time = time.time() - start_time
    
    # Find optimal parameters
    max_idx = np.argmax(results['transfer_rate'])
    max_rate = results['transfer_rate'][max_idx]
    
    print(f"\n‚úÖ Optimization results ({sweep_time:.1f} s for 50 samples):")
    print(f"  ‚Ä¢ Maximum transfer rate: {max_rate:.2e} s‚Åª¬π")
    print(f"  ‚Ä¢ Optimal parameters:")
    for param in param_ranges.keys():
        optimal_value = results[param][max_idx]
        print(f"    - {param}: {optimal_value:.2e}")
    
    # Basic statistics
    mean_rate = np.mean(results['transfer_rate'])
    std_rate = np.std(results['transfer_rate'])
    print(f"  ‚Ä¢ Rate statistics: Œº = {mean_rate:.2e}, œÉ = {std_rate:.2e}")
    
    print("\n" + "="*60)
    print("5Ô∏è‚É£ VISUALIZATION DEMO")
    print("="*60)
    
    # Create visualization
    print("\nüìä Generating network visualization...")
    
    try:
        plt.figure(figsize=(12, 4))
        
        # Plot 1: Network topology
        plt.subplot(1, 3, 1)
        portal.visualize_network()
        plt.title("Spin Network Topology")
        
        # Plot 2: Parameter sweep results
        plt.subplot(1, 3, 2)
        plt.scatter(results['base_coupling'], results['transfer_rate'], 
                   alpha=0.6, c=results['geometric_suppression'], cmap='viridis')
        plt.xscale('log')
        plt.yscale('log')
        plt.xlabel('Base Coupling')
        plt.ylabel('Transfer Rate')
        plt.title('Parameter Sweep Results')
        plt.colorbar(label='Geometric Suppression')
        
        # Plot 3: Energy transfer vs initial energy
        plt.subplot(1, 3, 3)
        energies = np.linspace(1, 15, 20)
        amplitudes = []
        for E in energies:
            amp = portal.energy_leakage_amplitude(E, 5.0)  # Transfer to 5 eV
            amplitudes.append(abs(amp))
        
        plt.semilogy(energies, amplitudes, 'b-o', markersize=4)
        plt.xlabel('Initial Energy (eV)')
        plt.ylabel('|Leakage Amplitude|')
        plt.title('Energy Dependence')
        plt.grid(True, alpha=0.3)
        
        plt.tight_layout()
        plt.show()
        
        print("‚úì Visualization complete")
        
    except Exception as e:
        print(f"‚ö† Visualization error: {e}")
    
    # Tensor network integration demo
    if tn_available:
        print("\n" + "="*60)
        print("6Ô∏è‚É£ TENSOR NETWORK INTEGRATION")
        print("="*60)
        
        try:
            tn_config = TensorNetworkConfig(
                backend='numpy',
                max_bond_dimension=20,
                contraction_method='greedy'
            )
            
            print(f"\nüï∏Ô∏è Creating tensor network representation:")
            print(f"  ‚Ä¢ Backend: {tn_config.backend}")
            print(f"  ‚Ä¢ Max bond dimension: {tn_config.max_bond_dimension}")
            print(f"  ‚Ä¢ Contraction method: {tn_config.contraction_method}")
            
            tn_portal = create_tensornetwork_from_su2_portal(portal, tn_config)
            
            print(f"  ‚Ä¢ Vertex tensors: {len(tn_portal.tensor_graph.vertex_tensors)}")
            print(f"  ‚Ä¢ Edge tensors: {len(tn_portal.tensor_graph.edge_tensors)}")
            
            # MPS approximation
            print("\nüîó Matrix Product State approximation:")
            mps_tensors = tn_portal.matrix_product_state_approximation()
            total_params = sum(tensor.size for tensor in mps_tensors)
            
            print(f"  ‚Ä¢ MPS tensors: {len(mps_tensors)}")
            print(f"  ‚Ä¢ Total parameters: {total_params}")
            print(f"  ‚Ä¢ Compression ratio: {total_params / (portal.network.number_of_nodes() * 16):.2f}")
            
        except Exception as e:
            print(f"‚ö† Tensor network demo error: {e}")
    
    print("\n" + "="*60)
    print("7Ô∏è‚É£ EXPERIMENTAL PREDICTIONS")
    print("="*60)
    
    # Laboratory-scale predictions
    print("\nüî¨ Laboratory-scale predictions:")
    
    lab_energies = [0.1, 1.0, 10.0, 100.0]  # eV
    hidden_energy = 5.0  # eV
    
    print(f"  Energy transfer probabilities (‚Üí {hidden_energy} eV):")
    for E_lab in lab_energies:
        amplitude = portal.energy_leakage_amplitude(E_lab, hidden_energy)
        probability = abs(amplitude)**2
        
        print(f"    ‚Ä¢ {E_lab:6.1f} eV ‚Üí P = {probability:.2e}")
    
    # Time scale estimates
    print(f"\n‚è±Ô∏è Time scale estimates:")
    realistic_rate = transfer_rate * 1e-10  # Conservative estimate
    if realistic_rate > 0:
        leakage_time = 1.0 / realistic_rate
        print(f"  ‚Ä¢ Characteristic leakage time: {leakage_time:.2e} s")
        
        if leakage_time < 1e-6:
            print(f"  ‚Ä¢ In convenient units: {leakage_time*1e9:.1f} ns")
        elif leakage_time < 1e-3:
            print(f"  ‚Ä¢ In convenient units: {leakage_time*1e6:.1f} Œºs")
        elif leakage_time < 1:
            print(f"  ‚Ä¢ In convenient units: {leakage_time*1e3:.1f} ms")
        else:
            print(f"  ‚Ä¢ In convenient units: {leakage_time:.1f} s")
    
    print("\nüéØ Detection requirements:")
    print("  ‚Ä¢ Energy resolution: ŒîE < 0.01 eV")
    print("  ‚Ä¢ Time resolution: Œît < œÑ/10")
    print("  ‚Ä¢ Angular momentum precision: Œîj < 0.1")
    print("  ‚Ä¢ Magnetic field stability: ŒîB/B < 10‚Åª‚Å∂")
    
    print("\n" + "="*80)
    print("üéâ COMPLETE FRAMEWORK DEMONSTRATION FINISHED")
    print("="*80)
    
    print("\nüìã Summary of capabilities demonstrated:")
    print("  ‚úì SU(2) recoupling coefficient computation")
    print("  ‚úì Spin network portal configuration")
    print("  ‚úì Energy transfer amplitude calculation")
    print("  ‚úì Parameter optimization and sweeps")
    print("  ‚úì Network visualization")
    print("  ‚úì Tensor network integration" if tn_available else "  ‚ö† Tensor network integration (limited)")
    print("  ‚úì Experimental predictions")
    
    print("\nüöÄ Framework ready for integration into hidden-sector energy transfer models!")
    print("\nüìÅ See leakage_amplitude_sim.ipynb for interactive exploration")
    print("üìñ See spin_network_portal.tex for complete theoretical framework")

if __name__ == "__main__":
    main()
